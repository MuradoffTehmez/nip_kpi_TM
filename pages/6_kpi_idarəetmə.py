# pages/6_kpi_idar…ôetm…ô.py

import streamlit as st
import datetime
from sqlalchemy import func
from database import get_db
from models.user import User
from models.kpi import EvaluationPeriod, Question, Evaluation, EvaluationStatus
from utils.utils import check_login, show_notifications
from services.notification_service import NotificationService

st.set_page_config(layout="wide", page_title="KPI ƒ∞dar…ôetm…ô")

# T…ôhl√ºk…ôsizlik yoxlamasƒ±
current_user = check_login()

with get_db() as session:
    if current_user.role != 'admin':
        st.error("Bu s…ôhif…ôy…ô giri≈ü √º√ß√ºn icaz…ôniz yoxdur.")
        st.stop()

st.sidebar.page_link(page="pages/6_kpi_idar…ôetm…ô.py", label="KPI ƒ∞dar…ôetm…ô", icon=":material/settings:")
show_notifications()  # Show notifications in sidebar

st.title("KPI Modulunun ƒ∞dar…ô Edilm…ôsi")

tab1, tab2, tab3 = st.tabs(["Qiym…ôtl…ôndirm…ô D√∂vrl…ôri", "Suallar", "ƒ∞stifad…ô√ßil…ôr"])

with tab1:
    st.header("Qiym…ôtl…ôndirm…ô D√∂vrl…ôrinin ƒ∞dar…ô Edilm…ôsi")
    
    with st.expander("‚ûï Yeni D√∂vr Yarat", expanded=False):
        with st.form("yeni_dovr_form", clear_on_submit=True):
            period_name = st.text_input("D√∂vr√ºn adƒ±", placeholder="M…ôs…ôl…ôn, 2025 - I R√ºbl√ºk")
            start_date = st.date_input("Ba≈ülama tarixi", datetime.date.today())
            end_date = st.date_input("Bitm…ô tarixi", datetime.date.today() + datetime.timedelta(days=30))
            
            submitted = st.form_submit_button("D√∂vr√º Yarat v…ô Tap≈üƒ±rƒ±qlarƒ± T…ôyin Et")
            if submitted and period_name:
                try:
                    with get_db() as session:
                        new_period = EvaluationPeriod(name=period_name, start_date=start_date, end_date=end_date)
                        session.add(new_period)
                        session.flush() # ID-ni almaq √º√ß√ºn

                        users = session.query(User).filter(User.is_active == True).all()
                        for user in users:
                            # H…ôr istifad…ô√ßi √º√ß√ºn √∂z√ºn√ºqiym…ôtl…ôndirm…ô tap≈üƒ±rƒ±ƒüƒ±
                            self_evaluation = Evaluation(
                                period_id=new_period.id,
                                evaluated_user_id=user.id,
                                evaluator_user_id=user.id,
                                status=EvaluationStatus.PENDING
                            )
                            session.add(self_evaluation)
                        
                        session.commit()
                        
                        # ƒ∞stifad…ô√ßil…ôr…ô bildiri≈ü g√∂nd…ôririk
                        for user in users:
                            NotificationService.create_notification(
                                user_id=user.id,
                                message=f"Yeni qiym…ôtl…ôndirm…ô d√∂vr√º '{period_name}' yaradƒ±ldƒ±. Qiym…ôtl…ôndirm…ô formunu doldurun."
                            )
                            
                        st.success(f"'{period_name}' d√∂vr√º v…ô {len(users)} √∂z√ºn√ºqiym…ôtl…ôndirm…ô tap≈üƒ±rƒ±ƒüƒ± yaradƒ±ldƒ±!")
                        st.rerun()
                except Exception as e:
                    st.error(f"D√∂vr yaratma zamanƒ± x…ôta ba≈ü verdi: {str(e)}")

    st.markdown("---")
    st.subheader("üìä M√∂vcud D√∂vrl…ôr")
    try:
        with get_db() as session:
            periods = session.query(EvaluationPeriod).order_by(EvaluationPeriod.start_date.desc()).all()
            if not periods:
                st.info("He√ß bir qiym…ôtl…ôndirm…ô d√∂vr√º yaradƒ±lmayƒ±b.")
            else:
                for p in periods:
                    with st.container(border=True):
                        st.subheader(p.name)
                        st.caption(f"Tarix aralƒ±ƒüƒ±: {p.start_date.strftime('%d.%m.%Y')} - {p.end_date.strftime('%d.%m.%Y')}")
    except Exception as e:
        st.error(f"D√∂vrl…ôri y√ºkl…ôy…ôrk…ôn x…ôta ba≈ü verdi: {str(e)}")

with tab2:
    st.header("Suallarƒ±n ƒ∞dar…ô Edilm…ôsi")
    
    # Aktiv suallarƒ±n √ß…ôkil…ôrinin c…ômini g√∂st…ôr
    with get_db() as session:
        total_weight_query = session.query(func.sum(Question.weight)).filter(Question.is_active == True)
        current_total_weight = total_weight_query.scalar() or 0.0

        st.warning(f"Diqq…ôt: Aktiv suallarƒ±n √ß…ôkil…ôrinin c…ômi 1.0 (100%) olmalƒ±dƒ±r. Hazƒ±rkƒ± c…ôm: {current_total_weight:.2f}")
        if abs(current_total_weight - 1.0) > 0.001:
            st.error("√á…ôkil…ôrin c…ômi 1.0 deyil! Z…ôhm…ôt olmasa, suallarƒ± redakt…ô ed…ôr…ôk c…ômi 1.0-a b…ôrab…ôrl…ô≈üdirin.")

    with st.expander("‚ûï Yeni Sual ∆èlav…ô Et", expanded=False):
        with st.form("yeni_sual_form", clear_on_submit=True):
            q_text = st.text_area("Sualƒ±n m…ôtni")
            q_category = st.text_input("Kateqoriya", value="√úmumi")
            q_weight = st.number_input("√á…ôkisi (m…ôs…ôl…ôn, 0.5)", min_value=0.0, max_value=1.0, step=0.01, format="%.2f", value=0.1)
            q_submitted = st.form_submit_button("∆èlav…ô et")
            if q_submitted and q_text:
                try:
                    with get_db() as session:
                        # Yeni sual …ôlav…ô etm…ôzd…ôn …ôvv…ôl √ß…ôki c…ômini yoxlayƒ±rƒ±q
                        total_weight_query = session.query(func.sum(Question.weight)).filter(Question.is_active == True)
                        current_total_weight = total_weight_query.scalar() or 0.0
                        
                        if current_total_weight + q_weight > 1.0:
                            st.error(f"Yeni sual …ôlav…ô etm…ôk m√ºmk√ºn deyil! C…ôm {current_total_weight + q_weight:.2f} olacaq, lakin maksimum 1.0 ola bil…ôr.")
                        else:
                            new_question = Question(text=q_text, category=q_category, weight=q_weight)
                            session.add(new_question)
                            session.commit()
                            st.success("Yeni sual …ôlav…ô edildi!")
                            st.rerun()
                except Exception as e:
                    st.error(f"Sual …ôlav…ô ed…ôrk…ôn x…ôta ba≈ü verdi: {str(e)}")

    st.markdown("---")
    st.subheader("‚ùì M√∂vcud Suallar")
    try:
        with get_db() as session:
            questions = session.query(Question).all()
            st.dataframe(
                [{"ID": q.id, "Kateqoriya": q.category, "Sual": q.text, "√á…ôki": q.weight, "Aktiv": q.is_active} for q in questions],
                use_container_width=True
            )
    except Exception as e:
        st.error(f"Suallarƒ± y√ºkl…ôy…ôrk…ôn x…ôta ba≈ü verdi: {str(e)}")

with tab3:
    st.header("ƒ∞stifad…ô√ßil…ôr")
    try:
        with get_db() as session:
            users = session.query(User).all()
            st.dataframe(
                [{"ID": u.id, "Ad Soyad": u.get_full_name(), "ƒ∞stifad…ô√ßi adƒ±": u.username, "Rol": u.role, "Aktiv": u.is_active} for u in users],
                use_container_width=True
            )
    except Exception as e:
        st.error(f"ƒ∞stifad…ô√ßil…ôri y√ºkl…ôy…ôrk…ôn x…ôta ba≈ü verdi: {str(e)}")